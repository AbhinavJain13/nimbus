<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <!-- ===================================================================
         rm.Manager implementation
         =================================================================== -->

    <bean id="nimbus-rm.accountingManager"
          class="org.nimbustools.gateway.accounting.manager.AccountingManager"
          init-method="recover_initialize">

        <constructor-arg index="0" ref="nimbus-rm.ec2manager"/>
        <constructor-arg index="1" ref="nimbus-rm.accountingManager.accountant"/>
        <constructor-arg index="2" ref="hibernateSessionFactory"/>

        <property name="useScheduledCharging" value="true"/>
        <property name="chargeFrequencySeconds" value="$EC2CLIENT{accounting.charge.frequency}"/>
        <property name="chargeLookaheadSeconds" value="$EC2CLIENT{accounting.charge.lookahead}"/>
    </bean>

    <bean id="nimbus-rm.keyManager"
          class="org.nimbustools.gateway.ec2.manager.EC2KeyManager" >
        <constructor-arg index="0" ref="nimbus-rm.ec2manager"/>
        <constructor-arg index="1" ref="nimbus-rm.ec2manager.accessManager"/>
    </bean>

    <bean id="nimbus-rm.ec2manager"
          class="org.nimbustools.gateway.ec2.manager.EC2GatewayManager">
        <constructor-arg index="0" ref="nimbus-rm.ec2manager.accessManager"/>
        <constructor-arg index="1" ref="nimbus-rm.ec2manager.instanceTracker"/>
        <constructor-arg index="2" ref="nimbus-rm.ec2manager.translator"/>
        <constructor-arg index="3" ref="hibernateSessionFactory"/>
    </bean>


    <!-- ===================================================================
         Creation interfaces
         =================================================================== -->
    <bean id="nimbus-rm.accountingManager.accountant"
          class="org.nimbustools.gateway.accounting.manager.defaults.DefaultAccountant">
        <constructor-arg index="0" ref="hibernateSessionFactory"/>
    </bean>


    <bean id="nimbus-rm.ec2manager.accessManager"
          class="org.nimbustools.gateway.ec2.creds.defaults.DefaultEC2AccessManager"
          init-method="initialize">
        <property name="sessionFactory" ref="hibernateSessionFactory"/>
        <property name="credentialResource" value="$EC2CLIENT{ec2.credential.file}"/>
    </bean>


    <bean id="nimbus-rm.ec2manager.instanceTracker"
          class="org.nimbustools.gateway.ec2.monitoring.defaults.DefaultInstanceTracker"
          init-method="validate">
        <constructor-arg index="0" ref="nimbus-rm.ec2manager.accessManager"/>
        <constructor-arg index="1" ref="nimbus-rm.ec2manager.translator"/>
        <constructor-arg index="2" ref="hibernateSessionFactory"/>

        <property name="ec2PollFrequencySeconds" value="$EC2CLIENT{ec2.poll.frequency}"/>
        <property name="instanceExpireSeconds" value="$EC2CLIENT{ec2.instance.expire}"/>

    </bean>

    
    <bean id="nimbus-rm.ec2manager.translator"
          class="org.nimbustools.gateway.ec2.manager.defaults.DefaultTranslator"
          init-method="validate">
        <property name="smallMemory" value="$OTHER_GATEWAY{memory.small}" />
        <property name="publicNetworkName" value="$OTHER_GATEWAY{net.public}" />
        <property name="privateNetworkName" value="$OTHER_GATEWAY{net.private}" />

    </bean>
        

    <!-- ===================================================================
         rm.BasicLegality implementation (using nimbustools default)
         =================================================================== -->

    <bean id="nimbus-rm.BasicLegality"
          class="org.nimbustools.api.defaults.services.rm.DefaultBasicLegality" />

    
    <!-- ===================================================================
         brain.ModuleLocator implementation

         For use from above to find key modules, where "above" in almost all
         cases means a container (the remote messaging layer).  Those cannot be
         served by dependency injection (or if they happened to be, would be a
         different application context unless you took time to integrate
         directly).
         =================================================================== -->

    <bean id="nimbus-brain.ModuleLocator"
          class="org.nimbustools.api.defaults.brain.DefaultModuleLocator">

        <lookup-method name="getManager" bean="nimbus-rm.accountingManager"/>
        <lookup-method name="getReprFactory" bean="nimbus-repr.ReprFactory"/>
        <lookup-method name="getMetadataServer" bean="nimbus-metadata-server"/>
        <lookup-method name="getKeyManager" bean="nimbus-rm.keyManager" />

    </bean>


    <!-- ===================================================================
         representation classes are broken out
         =================================================================== -->

    <import resource="main.repr.xml"/>


    <!-- ===================================================================
         property sources are concentrated in this file
         =================================================================== -->

    <import resource="main.conflocator.xml"/>


    <!-- ===================================================================
         metadata server is a no-op in the gateway
         =================================================================== -->

    <bean id="nimbus-metadata-server"
          class="org.nimbustools.gateway.StubMetadataServer" />


</beans>
