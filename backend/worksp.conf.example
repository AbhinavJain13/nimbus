# NOTE: both '#' and ';' are considered comment characters

###########
# general #
###########

[general]

# Specific implementation

workspaceimpl: xen_v3

# log activity to files as well as to console
#   - by default, all DEBUG (or higher) messages are sent to a file
#   - IMPORTANT: the daemonized functions of this program (moving 
#     images and the service notification mechanism) have no other 
#     way of logging all of the details of actions/errors
#   - NOTE: each program invocation gets one file (filename is
#     based on program subcommand, time, and workspace name)
#   - if you need to delete logs as time goes on, use cron

logfiledir: /opt/workspace/logs

############
# xenpaths #
############

[xenpaths]
xm: /usr/sbin/xm
xend: /usr/sbin/xend
pygrub: /usr/bin/pygrub

###############
# systempaths #
###############

[systempaths]

# This is called via sudo to adjust bridging policies and DHCP configurations
# for workspaces.
# The installer will move its copy of dhcp-config.sh to this path and verify
# the permissions of the file and its parent directories.  Proper permissions
# on this script are important if calling it via sudo is meant to be meaningful

dhcpconfig: /opt/workspace/bin/dhcp-config.sh

# This is called when making a blankspace partition.  This is not called 
# under sudo.  It's just separated into a script for easier replacement or
# customization

blankcreate: /opt/workspace/bin/blankcreate.sh

# for propagation notifications back to the service
ssh: /usr/bin/ssh


# If neither SCP nor GUC is configured, propagation will fail.
# If you want that, better to disable propagation in the workspace
# service than let it fail here later on by not finding scp or guc.

# If your are using SCP, see the behavior section at the end of
# this file for some SCP options.

scp: /usr/bin/scp
;guc: /opt/globus/bin/globus-url-copy


# Must be absolute path, used by installer (which will install this
# program to this path and verify the permissions of its parent
# directories etc).

thisexe: /opt/workspace/bin/workspace-control

# For customization task support
# - mounttool is a script with elevated privileges to mount and alter VM images
# - mountdir is where images are mounted
# - tmpdir is where custom files (originally sent from workspace client) are
#   stored before moving them to the VM
# *** The tmpdir path must be known to the service
mounttool: /opt/workspace/bin/mount-alter.sh
mountdir:/opt/workspace/mnt
tmpdir:/opt/workspace/tmp

# SUDO: see notes below

sudo: /usr/bin/sudo


# PERMISSIONS AND SUDO NOTES:
#
# sudo is used for altering/securing the system's networking setup for a VM
# 
# And for Xen3, it is used for xm and xend.
# 
# Corresponding entries must be in the sudoers file, e.g:
# 
#   globus ALL=(root) NOPASSWD: /opt/workspace/bin/mount-alter.sh
#   globus ALL=(root) NOPASSWD: /opt/workspace/bin/dhcp-config.sh
#   globus ALL=(root) NOPASSWD: /usr/sbin/xm
#   globus ALL=(root) NOPASSWD: /usr/sbin/xend
# 
# ... where "globus" is the privileged account that runs workspace-control
#
# For information about sudo, see:
#     http://www.gratisoft.us/sudo/
# And:
#     http://xkcd.com/c149.html
#
# Since we call it via sudo, the default dhcpconfig value
# "/opt/workspace/bin/dhcp-config.sh" implies that /opt, /opt/workspace/, 
# and /opt/workspace/bin are not writeable by anyone but root. 
#
# "/opt/workspace/bin/dhcp-config.sh" itself should be owned by
# root and chmod 700
#
# These are the recommended permissions for the default 
# /opt/workspace configurations distributed in the program's
# example configuration file:
#
# drwxr-xr-x   root    root     /opt
# drwxr-xr-x   root    root     /opt/workspace
#
# /opt/workspace contents:
#
# drwxr-x---   root    globus   bin
# drwxr-x---   root    globus   images
# drwx------   globus  globus   logs
# drwx------   globus  globus   mnt
# drwx------   globus  globus   persistence
# drwx------   globus  globus   secureimages
# drwx------   globus  globus   tmp
# -rw-r-----   root    globus   worksp.conf


# NOTE -- The installer can accomplish this all for you (except for the
# sudo policies), even if you replace the default directory configurations
# in this conf file.
#
# Use the "--onlyverify" option ("-o") of the installer to see what it
# would like to do (and also see -h for installer help).  Once you get it
# right, you can use the installer's scripted mode (non-interactive) to
# install to many nodes at once.


####################
# image management #
####################

[images]

# local image repository directory
#   - If a relative path is specified at the cmd line, this is the root dir
#     where the program begins to look for the image to instantiate
#   - It only makes sense to put read-only images and kernels here since
#     clients can specify the same image to use simultaneously (unless there
#     is coordination at a higher level or via service authz callout). 

localdir: /opt/workspace/images


# kernels allowed, separate w/ comma
#   - first one in list is used if kernel not specified on cmdline
#   - TODO: behavior->allow_guestkernel_override will disable this as 
#     an authz list
#   - NOTE: using  "%(localdir)s" references above definition of local 
#     image dir or you could use absolute path

guestkernels: %(localdir)s/vmlinuz-2.6-xen


# use a matching initrd?
#   - if this configuration exists, the software will search for a file
#     matching the kernel name with a suffix to use as an initrd
#   - define the suffix here, for example "-initrd"
#   - example: if the definition is "-initrd" and the kernel to use is named
#     "something" then if a file exists in the same directory called 
#     "something-initrd" it will be used as the ramdisk for VM launches
#   - if no such file exists, only a kernel will be used, no ramdisk

matchramdisk: -initrd


# secure propagation directory
#   - this directory is where workspace specific images that have been
#     retrieved with the propagation code are placed
#   - this is in place until image digest signing is implemented
#   - this must be separate from localdir to ensure that a random
#     workspace service user can not specify any image that has been
#     propagated to this node for his own use
#   - this must be an absolute path

securelocaldir: /opt/workspace/secureimages


###############
# persistence #
###############

[persistence]

# Persistence allows the program to store some information about current
# deployed workspaces.
persistencedir: /opt/workspace/persistence


#######################
# networking behavior #
#######################

[networking]

# An association is a networking context used to convey extra
# information about a networking configuration.
#
# In the current version, an association is required.
#
# Below, list an association and its valid IP ranges, 
# starting with "association_0" (and "association_1", etc.)
#
# You must tie a specific bridge to an association, list the bridge 
# next to the assoication name as shown below (the "$bridge" value).
# Then, the VM will be bridged to the appropriate one.
#
# In order to correctly implement the DHCP mechanism of getting the
# networking information to the workspace, you must also list the
# interface on the bridge that the DHCP request should be directed
# to.  Directing the request to a specific interface prevents DHCP
# requests from being broadcast to other workspaces as well as to
# the real network.
#
# This is "$dhcpvif" below.
#
# You can doublecheck what vif is on what bridge by running "brctl show"
# Normally you'd run the DHCP server in dom0 and the defaults are like
# so:
#   xenbr0 <-> vif0.0
#   xenbr1 <-> vif0.1
#   xenbr2 <-> vif0.2
#
# For "$subnet" below, if you don't like the /bitmask subnet syntax, you can
# use ranges but they must be valid subnet ranges, e.g.,
# 140.221.0.0-140.221.255.255

# MAC prefixes ($pfx below) are not necessary to configure here except in
# advanced configurations (leave as "none").
#
# syntax: 
# association_#: $name; $bridge; $dhcpvif; none|$pfx; $subnet [, subnet, ...]

# examples:

association_0: private1; xenbr1; vif0.1 ; none; 192.168.0.0/24
;association_1: private2; xenbr2; vif0.2; none; 172.16.65.0/24
;association_2: private3; xenbr3; vif0.3; none; 192.168.7.0/24
;association_3: private4; xenbr4; vif0.4; none; 10.10.10.0/24


# Check if configured ip ranges in the associations list 
# are valid or not, default is true.
# This serves as a basic sanity check, you could disable it...
;check_ip_ranges: false

# Track MAC/IP conflicts and give MAC assignments when not specified.
# These are advanced configuration and should be left as "false",
# the service tracks these conflicts in normal setups.
track_MAC_assignments: false
track_IP_assignments: false


##################
# other behavior #
##################

[behavior]

# In the future this will be decided by the workspace-control invoker 
# on a per VM basis.  Default is 1, if a parsing problem etc., also 
# defaults to 1.
num_cpu_per_vm: 1

# If using scp, if user is not specified in URL (e.g., scp://lily@host/path),
# then this configuration will allow you to make a default other than the
# account that the workspace-control program runs in.  If a default is
# necessary and this is not configured, then the scp invocation does not
# specify a user, making it default to the account that workspace-control
# is running under.
;scp_user: bob

# If using scp, can user be specified in the URL?  If not, requests that
# do will be rejected.  Requests without user specification will use the
# default as discussed directly above (either the workspace-control running
# account or the configured scp_user account)
# defaults to true
;scp_user_override: false

# Decide whether to mount via "tap:aio" or "file"
# You can put an arbitrary string here too and it will be passed along to
# Xen.  If you are familiar with Xen configuration, this is the string
# that would sit in the "disk" configuration.
#
# For example: "disk = ['file:/home/"   [etc]
# Or: "disk = ['tap:aio:/home/"   [etc]
#
xenmounttype: file


# assume xend is running (saves time, ~400ms, fails as late as
# possible) if set to true, no xend restart capability is possible
# default true
;assume_xend: false

# If xend is not running, attempt to start?  Default: false
;restart_xend: true

# seconds to wait for xend to initialize (it's a detached daemon)
# before testing it (failure after this delay is taken to mean xend
# failed to boot).
# If unconfigured, default is 1.0 seconds
;restart_xend_secs: 0.3

# allow guest kernel to be overriden, default is false
;allow_guestkernel_override: true

# when removing a workpsace, shut it down gracefully before destroying?
# default is true
;checkshutdown: false

# if checkshutdown is true, max seconds to wait before destroying?
# default is 15
checkshutdownpause: 30

